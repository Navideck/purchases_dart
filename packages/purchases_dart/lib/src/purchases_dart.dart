import 'package:purchases_dart/src/helper/cache_manager.dart';
import 'package:purchases_dart/src/helper/identity_manager.dart';
import 'package:purchases_dart/src/helper/logger.dart';
import 'package:purchases_dart/src/model/purchases_header.dart';
import 'package:purchases_dart/src/model/raw_customer.dart';
import 'package:purchases_dart/src/networking/purchases_backend.dart';
import 'package:purchases_dart/src/parser/customer_parser.dart';
import 'package:purchases_dart/src/purchases_dart_configuration.dart';
import 'package:purchases_dart/src/store_product_interface.dart';
import 'package:purchases_flutter/purchases_flutter.dart';

/// Entry point for PurchasesDart.
class PurchasesDart {
  static PurchasesBackend? _backend;
  static CustomerInfo? _lastReceivedCustomerInfo;
  static final CustomerParser _customerParser = CustomerParser();
  static final Set _customerInfoUpdateListeners = {};
  static late StoreProductInterface _storeProduct;
  static late CacheManager _cacheManager;
  static late IdentityManager _identityManager;

  /// Gets the current appUserID.
  static String? get appUserId => _identityManager.currentAppUserId;

  /// Sets up Purchases with your API key and an app user id.
  ///
  /// [PurchasesDartConfiguration] Object containing configuration parameters
  /// Make sure to call this method before calling any other methods, and only call it once.
  static Future<void> configure(
    PurchasesDartConfiguration configuration,
  ) async {
    if (_backend != null) throw Exception("PurchasesDart already configured");
    _cacheManager = await CacheManager.instance;
    _backend = PurchasesBackend(
      apiKey: configuration.apiKey,
      storeProduct: configuration.storeProduct,
    );
    _identityManager = IdentityManager(_cacheManager, _backend!);
    _storeProduct = configuration.storeProduct;
    _storeProduct.onCustomerInfoUpdate = _updateCustomerInfoListeners;
    _identityManager.configure(configuration.appUserId);
  }

  /// Configures log level
  /// Used to set the log level. Useful for debugging issues with the lovely team @RevenueCat.
  /// The default is [LogLevel.info] in release builds and [LogLevel.debug] in debug builds.
  static void setLogLevel(LogLevel level) => Logger.logLevel = level;

  /// Set a custom log handler for redirecting logs to your own logging system.
  /// If you wish to receive Debug level messages, see [setLogLevel].
  ///
  /// [logHandler] It will get called for each log event.
  /// Use this function to redirect the log to your own logging system
  static void setLogHandler(LogHandler logHandler) =>
      Logger.logHandler = logHandler;

  /// Gets current customer info. If the customer does not exist it will create one using the `appUserId` provided during configuration.
  static Future<CustomerInfo?> getCustomerInfo({
    PurchasesHeader? headers,
  }) async {
    _validateConfig();
    return await _backend?.getCustomerInfo(
      appUserId!,
      headers: headers,
    );
  }

  /// Fetch the configured offerings for this users. Offerings allows you to
  /// configure your products via RevenueCat and greatly simplifies
  /// management. See [the guide](https://docs.revenuecat.com/offerings) for
  /// more info.
  static Future<Offerings?> getOfferings({
    PurchasesHeader? headers,
  }) async {
    _validateConfig();
    return await _backend?.getOfferings(
      appUserId!,
      headers: headers,
    );
  }

  /// This function will logIn the current user with an appUserID.
  /// Typically this would be used after logging in a user to identify them without
  /// calling configure
  ///
  /// Returns a [LogInResult] object, or throws a Exception if there
  /// was a problem restoring transactions. LogInResult holds a [CustomerInfo] object
  /// and a bool that can be used to know if a user has just been created for the first time.
  ///
  /// [newAppUserId] The appUserID that should be linked to the currently user
  @Deprecated(
      'Login method using undocumented APIs which might change or stop working, set appUserId in configure instead, or to change id of current user, use updateAppUserId method.')
  static Future<LogInResult> login(String newAppUserId) async {
    _validateConfig(newAppUserId);
    return _identityManager.logIn(newAppUserId);
  }

  /// Logs out the  Purchases client, clearing the saved appUserID. This will
  /// generate a random user id and save it in the cache.
  static Future<void> logout() => _identityManager.logOut();

  /// If the [appUserId] has been generated by RevenueCat
  static Future<bool> get isAnonymous async =>
      _identityManager.currentUserIsAnonymous();

  /// Update app user id, this will change the current app user id locally
  /// This will not change the app user id in the RevenueCat backend
  static Future<void> updateAppUserId(String appUserId) async {
    _validateConfig(appUserId);
    await _identityManager.updateAppUserId(appUserId);
  }

  /// Makes a purchase. Might throw [Exception]
  /// Check if [PurchasesErrorHelper.getErrorCode] is
  /// [PurchasesErrorCode.purchaseCancelledError] to check if the user cancelled
  /// the purchase.
  ///
  /// [packageToPurchase] The Package you wish to purchase
  static Future<void> purchasePackage(Package packageToPurchase) async {
    _validateConfig();
    return await _storeProduct.purchasePackage(
      packageToPurchase,
      appUserId!,
    );
  }

  /// Sets a function to be called on updated customer info.
  ///
  /// The function is called right away with the latest customer info as soon
  /// as it's set.
  ///
  /// [customerInfoUpdateListener] CustomerInfo update listener.
  static void addCustomerInfoUpdateListener(
    CustomerInfoUpdateListener customerInfoUpdateListener,
  ) {
    _customerInfoUpdateListeners.add(customerInfoUpdateListener);
    final lastReceivedCustomerInfo = _lastReceivedCustomerInfo;
    if (lastReceivedCustomerInfo != null) {
      customerInfoUpdateListener(lastReceivedCustomerInfo);
    }
  }

  /// Removes a given CustomerInfoUpdateListener
  ///
  /// [customerInfoUpdateListener] CustomerInfoUpdateListener reference of the listener to remove.
  static void removeCustomerInfoUpdateListener(
    CustomerInfoUpdateListener customerInfoUpdateListener,
  ) {
    _customerInfoUpdateListeners.remove(customerInfoUpdateListener);
  }

  /// Creates a [CustomerInfo] object from a json object
  static CustomerInfo? createCustomer(Map<String, dynamic> json) =>
      _customerParser.createCustomer(RawCustomer.fromJson(json));

  /// Update customerInfo listeners
  static void _updateCustomerInfoListeners(CustomerInfo customerInfo) async {
    _lastReceivedCustomerInfo = customerInfo;
    for (final listener in _customerInfoUpdateListeners) {
      listener(customerInfo);
    }
  }

  /// Validates the configuration, throws an exception if the configuration is not valid
  static _validateConfig([String? userId]) {
    if (_backend == null) {
      throw Exception(
        "PurchasesDart.configure() must be called before calling any other methods",
      );
    }
    if (userId == null && appUserId == null) {
      throw Exception(
        "Failed to get userId, please set in configure method",
      );
    }
  }
}
